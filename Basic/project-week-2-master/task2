#from google.colab import drive
#drive.mount('/content/drive')
import zipfile
with zipfile.ZipFile("/content/test_images.zip") as zip_ref: zip_ref.extractall("test_images")
with zipfile.ZipFile("/content/train_images.zip") as zip_ref: zip_ref.extractall("train_images")
from PIL import Image
import numpy as np
import os
train_images = []
train_labels = []
count = 0
for dirc in sorted(os.listdir('/content/train_images/train_images')):
    if(count < 1):
        count += 1 
        continue 
    for img_path in os.listdir('/content/train_images/train_images'):
        im = Image.open('/content/train_images/train_images'+'/'+str(img_path))
        im = im.resize((100,100))
        train_images.append(np.array(im))
        train_labels.append(count-1)
    count += 1
    print('Reading '+str(count-2))
train_images = np.array(train_images)
train_labels = np.array(train_labels)
train_images.shape
train_labels.shape
print('train images shape = '+str(train_images.shape))
print('train labels shape = '+str(train_labels.shape))
train_labels = np.reshape(train_labels, (-1,1))
train_images = np.reshape(train_images, (-1,100,100,1))
train_labels.shape
train_images.shape
from sklearn.preprocessing import OneHotEncoder

enc = OneHotEncoder()
train_labels = enc.fit_transform(train_labels).toarray()
train_labels.shape
train_images = train_images / 255.0
from PIL import Image
import numpy as np
import os

test_images = []

count = 0
for dirc in sorted(os.listdir('/content/test_images/test_images')):
    if(count < 1):
        count += 1
        continue
    im = Image.open('/content/test_images/test_images/'+str(dirc))
    im = im.resize((100,100))
    
    test_images.append(np.array(im))
    print('Reading '+str(dirc))
!pip install --upgrade tensorflow
import tensorflow as tf
tf.__version__
import tensorflow as tf
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout
from tensorflow.keras import Model


train_ds = tf.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(10000).batch(32)
class MyModel(Model):
    def __init__(self):
        super(MyModel, self).__init__()
        self.conv1 = Conv2D(32, 4, padding='same', activation='relu')
        self.pool1 = MaxPool2D((2,2))
        self.conv2 = Conv2D(64, 4, padding='same', activation='relu')
        self.pool2 = MaxPool2D((2,2))
        self.flatten = Flatten()
        self.d1 = Dense(512, activation='relu')
        self.dropout1 = Dropout(0.4)
        self.d2 = Dense(128, activation='relu')
        self.dropout2 = Dropout(0.4)
        self.d3 = Dense(173, activation='softmax')

    def call(self, x):
        x = self.conv1(x)
        x = self.pool1(x)
        x = self.conv2(x)
        x = self.pool2(x)
        x = self.flatten(x)
        x = self.d1(x)
        x = self.dropout1(x)
        x = self.d2(x)
        x = self.dropout2(x)
        x = self.d3(x)
        return x

model = MyModel()
loss_object = tf.keras.losses.CategoricalCrossentropy()

optimizer = tf.keras.optimizers.Adam()
train_loss = tf.keras.metrics.Mean(name='train_loss')
train_accuracy = tf.keras.metrics.CategoricalAccuracy(name='train_accuracy')
@tf.function
def train_step(images, labels):
    with tf.GradientTape() as tape:
      
        predictions = model(images)
        loss = loss_object(labels, predictions)
    gradients = tape.gradient(loss, model.trainable_variables)
    optimizer.apply_gradients(zip(gradients, model.trainable_variables))

    train_loss(loss)
    train_accuracy(labels, predictions)
EPOCHS = 5

tf.keras.backend.set_floatx('float64')

for epoch in range(EPOCHS):
    for images, labels in train_ds:
      #  print(images.shape,labels.shape)  
        images = np.reshape(images, (-1,100,100,1))
      #  print(images.shape,labels.shape) 
        train_step(images, labels)
    
    model.save_weights('/content', save_format='tf')

    print('Epoch:',str(epoch+1),' Loss:',str(train_loss.result()),' Accuracy:',str(train_accuracy.result()*100))
    train_loss.reset_states()
    train_accuracy.reset_states()
test_images = np.array(test_images) 
test_images.shape
test_images = test_images / 255.0
model.load_weights('/content')
predictions = []
count = 0
for img in test_images:
  count += 1 
  print(count)
  img = np.reshape(img, (-1,100,100,1))
  predictions.append(np.argmax(model(img),axis=1))
!ls
predictions = np.array(predictions)
predictions.shape
import pandas as pd 

df = pd.DataFrame(predictions)
df.to_csv('/content/pred.csv')
!ls
df
